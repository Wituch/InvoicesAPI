// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InvoicesAPI.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Customers")]
    public partial class CustomersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Customers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Customers", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Customer not found")]
        public void CustomerNotFound()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("There are no customers in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When("Get customer request is sent with customer id 1daa55e3-b874-418d-9455-99ac9713652" +
                        "f", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then("Response status code is 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a customer")]
        public void CreateACustomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("There are no customers in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "FirstName",
                            "Jan"});
                table1.AddRow(new string[] {
                            "LastName",
                            "Kowalski"});
                table1.AddRow(new string[] {
                            "IdentityNumber",
                            "41121235715"});
                table1.AddRow(new string[] {
                            "StreetNumber",
                            "6"});
                table1.AddRow(new string[] {
                            "Street",
                            "Sowia"});
                table1.AddRow(new string[] {
                            "City",
                            "Poznań"});
                table1.AddRow(new string[] {
                            "ZipCode",
                            "61-131"});
#line 10
 testRunner.When("Create customer request is sent with following properties:", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "IdentityNumber",
                            "StreetNumber",
                            "Street",
                            "City",
                            "ZipCode"});
                table2.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "41121235715",
                            "6",
                            "Sowia",
                            "Poznań",
                            "61-131"});
#line 19
 testRunner.Then("Following customers are saved in the database:", ((string)(null)), table2, "Then ");
#line hidden
#line 22
 testRunner.When("Get customer request is sent with new customer id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("Response status code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Try to create a customer with duplicated identity number")]
        public void TryToCreateACustomerWithDuplicatedIdentityNumber()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create a customer with duplicated identity number", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("There are no customers in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "FirstName",
                            "Jan"});
                table3.AddRow(new string[] {
                            "LastName",
                            "Kowalski"});
                table3.AddRow(new string[] {
                            "IdentityNumber",
                            "41121235715"});
                table3.AddRow(new string[] {
                            "StreetNumber",
                            "6"});
                table3.AddRow(new string[] {
                            "Street",
                            "Sowia"});
                table3.AddRow(new string[] {
                            "City",
                            "Poznań"});
                table3.AddRow(new string[] {
                            "ZipCode",
                            "61-131"});
#line 27
 testRunner.When("Create customer request is sent with following properties:", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "IdentityNumber",
                            "StreetNumber",
                            "Street",
                            "City",
                            "ZipCode"});
                table4.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "41121235715",
                            "6",
                            "Sowia",
                            "Poznań",
                            "61-131"});
#line 36
 testRunner.Then("Following customers are saved in the database:", ((string)(null)), table4, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "FirstName",
                            "Marian"});
                table5.AddRow(new string[] {
                            "LastName",
                            "Kowal"});
                table5.AddRow(new string[] {
                            "IdentityNumber",
                            "41121235715"});
                table5.AddRow(new string[] {
                            "StreetNumber",
                            "8"});
                table5.AddRow(new string[] {
                            "Street",
                            "Żurawia"});
                table5.AddRow(new string[] {
                            "City",
                            "Bydgoszcz"});
                table5.AddRow(new string[] {
                            "ZipCode",
                            "60-000"});
#line 39
 testRunner.When("Create customer request is sent with following properties:", ((string)(null)), table5, "When ");
#line hidden
#line 48
 testRunner.Then("Response status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "IdentityNumber",
                            "StreetNumber",
                            "Street",
                            "City",
                            "ZipCode"});
                table6.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "41121235715",
                            "6",
                            "Sowia",
                            "Poznań",
                            "61-131"});
#line 49
 testRunner.And("Following customers are saved in the database:", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
