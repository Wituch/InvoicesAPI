// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InvoicesAPI.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Invoices")]
    public partial class InvoicesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Invoices.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Invoices", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerId",
                        "FirstName",
                        "LastName",
                        "IdentityNumber",
                        "StreetNumber",
                        "Street",
                        "City",
                        "ZipCode"});
            table7.AddRow(new string[] {
                        "6e7b995a-8caa-49fa-914b-fa6c80fc5627",
                        "Jan",
                        "Kowalski",
                        "41121235715",
                        "6",
                        "Sowia",
                        "Poznań",
                        "61-131"});
            table7.AddRow(new string[] {
                        "ddf9c8a7-a06e-430c-8cde-d7d4a1efda06",
                        "Marian",
                        "Kowal",
                        "60110678184",
                        "8",
                        "Żurawia",
                        "Bydgoszcz",
                        "60-000"});
#line 4
 testRunner.Given("There are following customers in the database:", ((string)(null)), table7, "Given ");
#line hidden
#line 8
 testRunner.And("There are no invoices in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an invoice")]
        [NUnit.Framework.TestCaseAttribute("6e7b995a-8caa-49fa-914b-fa6c80fc5627", "6e7b995a-8caa-49fa-914b-fa6c80fc5627", null)]
        [NUnit.Framework.TestCaseAttribute("ddf9c8a7-a06e-430c-8cde-d7d4a1efda06", "ddf9c8a7-a06e-430c-8cde-d7d4a1efda06", null)]
        [NUnit.Framework.TestCaseAttribute("ddf9c8a7-a06e-430c-8cde-d7d4a1efda06", "6e7b995a-8caa-49fa-914b-fa6c80fc5627", null)]
        [NUnit.Framework.TestCaseAttribute("6e7b995a-8caa-49fa-914b-fa6c80fc5627", "ddf9c8a7-a06e-430c-8cde-d7d4a1efda06", null)]
        public void CreateAnInvoice(string buyerId, string recipientId, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("buyerId", buyerId);
            argumentsOfScenario.Add("recipientId", recipientId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an invoice", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "InvoiceNumber",
                            "1/2024"});
                table8.AddRow(new string[] {
                            "BuyerId",
                            string.Format("{0}", buyerId)});
                table8.AddRow(new string[] {
                            "RecipientId",
                            string.Format("{0}", recipientId)});
                table8.AddRow(new string[] {
                            "IssueDate",
                            "03/03/2024"});
                table8.AddRow(new string[] {
                            "DeliveryDate",
                            "03/03/2024"});
                table8.AddRow(new string[] {
                            "ItemDescription",
                            "Teleskop"});
                table8.AddRow(new string[] {
                            "ItemQuantity",
                            "1"});
                table8.AddRow(new string[] {
                            "ItemPrice",
                            "350.0"});
                table8.AddRow(new string[] {
                            "TaxRate",
                            "23"});
                table8.AddRow(new string[] {
                            "ItemValue",
                            "350.0"});
#line 11
 testRunner.When("Create invoice request is sent with following properties:", ((string)(null)), table8, "When ");
#line hidden
#line 23
 testRunner.Then("Last response status code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "InvoiceNumber",
                            "BuyerId",
                            "RecipientId"});
                table9.AddRow(new string[] {
                            "1/2024",
                            string.Format("{0}", buyerId),
                            string.Format("{0}", recipientId)});
#line 24
 testRunner.And("Following invoices are saved in the database:", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
